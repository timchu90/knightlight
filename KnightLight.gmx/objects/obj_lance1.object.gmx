<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_lance</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canshoot[1] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//MovePendulum();
controller = 0;
//only allows the player to change the lance if she can move
if (alarm[0] &lt; room_speed * 0.4)
{
    x = obj_player1.x+lengthdir_x(25,obj_player1.image_angle-90);
    y = obj_player1.y+lengthdir_y(25,obj_player1.image_angle-90);
}
gamepad_set_axis_deadzone(controller,.15);
image_angle = obj_player1.image_angle-180;

if((gamepad_button_check_pressed(controller,gp_shoulderr)
        || gamepad_button_check_pressed(controller,gp_shoulderrb))
    &amp;&amp; canshoot[controller + 1] = true)
{
    canshoot[controller + 1] = false;
    alarm[0] = room_speed * 0.5;
    
    //sets the thrust direction to the direction of an analog stick
    //if the player is looking, it will use that direction
    //if the player is not lookg or moving, it will use the image_angle
    //otherwise it will use the movement direction
    //the direction is stored in thrustDirectionArray
    if ((gamepad_axis_value(controller, gp_axisrh) &gt; 0.5
        || gamepad_axis_value(controller, gp_axisrh) &lt; -0.5)
    || (gamepad_axis_value(controller, gp_axisrv) &gt; 0.5
        || gamepad_axis_value(controller, gp_axisrv) &lt; -0.5))
    {
        thrustDirectionArray[controller] = point_direction(0,0, 
            gamepad_axis_value(controller, gp_axisrh), 
            gamepad_axis_value(controller, gp_axisrv));
        move_towards_point(obj_reticle1.x, obj_reticle1.y, 20);//
    }
    else if (gamepad_axis_value(controller, gp_axisrh) == 0
        &amp;&amp; gamepad_axis_value(controller, gp_axisrv) == 0)
    {
        thrustDirectionArray[controller] = point_direction(0, 0,
            lengthdir_x(1,obj_player1.image_angle-90),//
            lengthdir_y(1,obj_player1.image_angle-90));//
        move_towards_point(obj_lance1.x + lengthdir_x(1,obj_player1.image_angle-90),//
            obj_lance1.y + lengthdir_y(1,obj_player1.image_angle-90), 20);//
    }
    else
    {
        thrustDirectionArray[controller] = point_direction(0,0, 
            gamepad_axis_value(controller, gp_axislh), 
            gamepad_axis_value(controller, gp_axislv));
        move_towards_point(obj_lance1.x + lengthdir_x(1,obj_player1.image_angle-90),//
            obj_lance1.y + lengthdir_y(1,obj_player1.image_angle-90), 20);//
    }
}
//this passes the speed to ThrustLance and changes to
//slow down over the thrust
if (obj_lance1.alarm[0] &gt; room_speed * 0.4)
{
    ThrustLance(9, 9, 0, obj_player1);
}
else if (obj_lance1.alarm[0] &gt; room_speed * 0.25)
{
    ThrustLance(3, 3, 0, obj_player1);
}
else if (obj_lance1.alarm[0] &gt; room_speed * 0.15)
{
    ThrustLance(2, 2, 0, obj_player1);
}
else if (obj_lance1.alarm[0] &gt; 1)
{
    ThrustLance(1, 1, 0, obj_player1);
    //then moves the lance in the last few frames
    move_towards_point(obj_player1.x+lengthdir_x(25,obj_player1.image_angle-90),
        obj_player1.y+lengthdir_y(25,obj_player1.image_angle-90),1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,44</point>
    <point>44,44</point>
  </PhysicsShapePoints>
</object>
